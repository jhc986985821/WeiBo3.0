<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mongo="http://www.springframework.org/schema/data/mongo"  
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:task="http://www.springframework.org/schema/task"  
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:jms="http://www.springframework.org/schema/jms"
	xsi:schemaLocation="   
	http://www.springframework.org/schema/data/mongo  
            http://www.springframework.org/schema/data/mongo/spring-mongo.xsd 
    		http://www.springframework.org/schema/beans        
    		http://www.springframework.org/schema/beans/spring-beans.xsd
    		http://www.springframework.org/schema/context
    		http://www.springframework.org/schema/context/spring-context.xsd
    		http://www.springframework.org/schema/tx
    		http://www.springframework.org/schema/tx/spring-tx.xsd
    		http://www.springframework.org/schema/aop 
    		http://www.springframework.org/schema/aop/spring-aop.xsd
    		http://www.springframework.org/schema/jee 
    		http://www.springframework.org/schema/jee/spring-jee.xsd
    		http://www.springframework.org/schema/jms 
    		http://www.springframework.org/schema/jms/spring-jms.xsd
    		http://www.springframework.org/schema/task 
    		http://www.springframework.org/schema/task/spring-task-3.0.xsd"

    		>
	
	<!-- 包扫描，以加载带了注解的要托管bean -->
	<context:component-scan base-package="com.hcq"/>
	
	
	<!-- 启用注解驱动 -->
	<tx:annotation-driven transaction-manager="txManager"/>
	
	
	<mongo:mongo host="127.0.0.1" port="27017"/>  
      
    <!-- Offers convenience methods and automatic mapping between MongoDB JSON documents and your domain classes. -->  
    <bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">  
            <constructor-arg ref="mongo"/>  
            <constructor-arg name="databaseName" value="weibo"/>  
    </bean>  
    
	<!-- spring 整合mybatis -->
	<!-- 数据库配置读取，因为要创建数据源，要知道数据库的配置 -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			 <list>  
            	<value>classpath*:jdbc.properties</value>  
            	<value>classpath*:redis.properties</value>  
        	</list>  
		</property>
	</bean>
	
	<!-- redis数据源-->

	<!-- dbcp 数据库连接池配置 -->

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${driverName}"></property> 
		<property name="url" value="${url}"></property>
		<property name="username" value="${username}"></property>
		<property name="password" value="${password}"></property>
		 <!--maxActive: 最大连接数量-->    
            <property name="maxActive" value="150"/>  
            <!--minIdle: 最小空闲连接-->    
            <property name="minIdle" value="5"/>  
            <!--maxIdle: 最大空闲连接-->    
            <property name="maxIdle" value="20"/>  
            <!--initialSize: 初始化连接-->    
            <property name="initialSize" value="30"/>  
            <!-- 连接被泄露时是否打印 -->  
            <property name="logAbandoned" value="true"/>  
            <!--removeAbandoned: 是否自动回收超时连接-->    
            <property name="removeAbandoned"  value="true"/>  
            <!--removeAbandonedTimeout: 超时时间(以秒数为单位)-->    
            <property name="removeAbandonedTimeout" value="10"/>  
            <!--maxWait: 超时等待时间以毫秒为单位 1000等于60秒-->  
            <property name="maxWait" value="1000"/>  
            <!-- 在空闲连接回收器线程运行期间休眠的时间值,以毫秒为单位. -->  
            <property name="timeBetweenEvictionRunsMillis" value="10000"/>  
            <!--  在每次空闲连接回收器线程(如果有)运行时检查的连接数量 -->  
            <property name="numTestsPerEvictionRun" value="10"/>  
            <!-- 1000 * 60 * 30  连接在池中保持空闲而不被空闲连接回收器线程-->  
            <property name="minEvictableIdleTimeMillis" value="10000"/>  
        <property name="validationQuery" value="SELECT NOW() FROM DUAL"/>  
	</bean>
	
	<!-- 配置mybatis的sqlsession工厂类 -->
	<!-- 配置mybatis整合spring的插件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<!--  还是用mybatis中的配置文件，<property name="configLocation" value="classpath:conf.xml"/> -->
		<!-- 优化，不在需要配置mybatis配置文件，配置mybatis别名 -->
		<property name="typeAliasesPackage" value="com.hcq.bean"></property>
		<property name="mapperLocations" value="classpath:com/hcq/dao/mapper/*.xml">
			<!-- <array>
				<value>com/hcq/dao/mapper/DistrictMapper.xml</value>
				<value>com/hcq/dao/mapper/HouseMapper.xml</value>
				<value>com/hcq/dao/mapper/HouseTypeMapper.xml</value>
				<value>com/hcq/dao/mapper/StreetMapper.xml</value>
				<value>com/hcq/dao/mapper/UserMapper.xml</value>
			</array> -->
		</property>
		
		
		<!-- 主要用来配置mybatis中的conf中的setting配置 -->
		<property name="configurationProperties">
			<props>
				<prop key="logImpl">LOG4J</prop>
			</props>
		</property>
	</bean> 
	
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<!-- 只能通过构造方法注入selsession -->
		<constructor-arg ref="sqlSessionFactory"></constructor-arg>
	</bean>
	
	<!-- 事务管理器  mybatis使用的是与jdbc同款的事务管理器 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	<task:annotation-driven scheduler="qbScheduler" mode="proxy"/>  
    <task:scheduler id="qbScheduler" pool-size="10"/>  
</beans>  

